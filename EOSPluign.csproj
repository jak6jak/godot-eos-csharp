<Project Sdk="Godot.NET.Sdk/4.4.1">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <EnableDynamicLoading>true</EnableDynamicLoading>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>
    <DefineConstants>$(DefineConstants)</DefineConstants>
    <AllowUnsafeBlocks>True</AllowUnsafeBlocks>
    <Configurations>Debug;ExportDebug;ExportRelease;</Configurations>
    <DefineConstants Condition="$([MSBuild]::IsOSPlatform('OSX'))">$(DefineConstants);EOS_PLATFORM_OSX;PLATFORM_POSIX</DefineConstants>
    <DefineConstants Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(DefineConstants);EOS_PLATFORM_WINDOWS_64;PLATFORM_WIN64</DefineConstants>
    <DefineConstants Condition="$([MSBuild]::IsOSPlatform('Linux'))">$(DefineConstants);EOS_PLATFORM_LINUX;PLATFORM_POSIX</DefineConstants>
    <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
    <RestoreAdditionalProjectSources />
    <RestoreAdditionalProjectFallbackFolders />
    <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
    <NuGetLockFile>packages.lock.json</NuGetLockFile>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
  </PropertyGroup>

  <!-- Include EOS SDK Source Files -->
  <ItemGroup>
    <Compile Include="..\SDK\Source\Core\**\*.cs">
      <Link>SDK\Core\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </Compile>
    <Compile Include="..\SDK\Source\Generated\**\*.cs">
      <Link>SDK\Generated\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </Compile>
    <Compile Include="..\SDK\Source\Overrides\**\*.cs">
      <Link>SDK\Overrides\%(RecursiveDir)%(Filename)%(Extension)</Link>
    </Compile>
  </ItemGroup>

  <!-- Include main project files -->
  <ItemGroup>
    <Compile Include="**/*.cs" Exclude="bin/**;obj/**;**/Test*/**;**/Generator/**;Steam/Facepunch.Steamworks/Facepunch.Steamworks.Test/**;Steam/Facepunch.Steamworks/Generator/**" />
  </ItemGroup>
  
  <!-- Windows Native Libraries - Plugin Path -->
  <ItemGroup Condition="$([MSBuild]::IsOSPlatform('Windows')) Or '$(RuntimeIdentifier)' == 'win-x64'">
    <!-- Content items that will be available at runtime -->
    <Content Include="addons/eosplugin/thirdparty/EOSSDK-Win64-Shipping.dll">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>EOSSDK-Win64-Shipping.dll</Link>
      <Pack>false</Pack>
    </Content>
    <Content Include="addons/eosplugin/thirdparty/steam_api64.dll">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>steam_api64.dll</Link>
      <Pack>false</Pack>
    </Content>
    
    <!-- Copy to plugin directory as well -->
    <None Include="addons/eosplugin/thirdparty/EOSSDK-Win64-Shipping.dll">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>addons/eosplugin/EOSSDK-Win64-Shipping.dll</Link>
    </None>
    <None Include="addons/eosplugin/thirdparty/steam_api64.dll">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>addons/eosplugin/steam_api64.dll</Link>
    </None>
  </ItemGroup>

  <!-- macOS Native Libraries - Plugin Path -->
  <ItemGroup Condition="$([MSBuild]::IsOSPlatform('OSX')) Or '$(RuntimeIdentifier)' == 'osx-x64' Or '$(RuntimeIdentifier)' == 'osx-arm64'">
    <NativeLibrary Include="addons/eosplugin/thirdparty/libEOSSDK-Mac-Shipping.dylib">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>libEOSSDK-Mac-Shipping.dylib</Link>
    </NativeLibrary>
<!--    <NativeLibrary Include="addons/eosplugin/thirdparty/libsteam_api.dylib">-->
<!--      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>-->
<!--      <Link>libsteam_api.dylib</Link>-->
<!--    </NativeLibrary>-->
  </ItemGroup>

  <!-- Linux Native Libraries - Plugin Path -->
  <ItemGroup Condition="$([MSBuild]::IsOSPlatform('Linux')) Or '$(RuntimeIdentifier)' == 'linux-x64'">
    <NativeLibrary Include="addons/eosplugin/thirdparty/libEOSSDK-Linux-Shipping.so">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      <Link>libEOSSDK-Linux-Shipping.so</Link>
    </NativeLibrary>
    <NativeLibrary Include="addons/eosplugin/thirdparty/libsteam_api.so">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      <Link>libsteam_api.so</Link>
    </NativeLibrary>
    
    <!-- Copy to plugin directory as well -->
    <None Include="addons/eosplugin/thirdparty/libEOSSDK-Linux-Shipping.so">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      <Link>addons/eosplugin/libEOSSDK-Linux-Shipping.so</Link>
    </None>
    <None Include="addons/eosplugin/thirdparty/libsteam_api.so">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      <Link>addons/eosplugin/libsteam_api.so</Link>
    </None>
  </ItemGroup>

  <!-- Configuration Files -->
  <ItemGroup>
    <Content Include="EOSconfig.cfg" />
    <Content Include="EOSPluign.runtimeconfig.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="steam_appid.txt" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="RiptideNetworking.Riptide" Version="2.2.1" />
  </ItemGroup>

  <!-- Build targets to ensure native libraries are properly referenced -->
  <Target Name="SetNativeLibraryPath" BeforeTargets="Build">
    <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('Windows'))">
      <NativeDllSearchPath>$(MSBuildProjectDirectory)\addons\eosplugin\thirdparty;$(OutputPath)</NativeDllSearchPath>
    </PropertyGroup>
  </Target>

  <!-- Custom target to copy native libraries with proper permissions -->
  <Target Name="CopyNativeLibraries" AfterTargets="Build">
    <ItemGroup Condition="$([MSBuild]::IsOSPlatform('Windows'))">
      <NativeFiles Include="addons/eosplugin/thirdparty/*.dll" />
    </ItemGroup>
    <ItemGroup Condition="$([MSBuild]::IsOSPlatform('OSX'))">
      <NativeFiles Include="addons/eosplugin/thirdparty/*.dylib" />
    </ItemGroup>
    <ItemGroup Condition="$([MSBuild]::IsOSPlatform('Linux'))">
      <NativeFiles Include="addons/eosplugin/thirdparty/*.so" />
    </ItemGroup>
    
    <Copy SourceFiles="@(NativeFiles)" DestinationFolder="$(OutputPath)" SkipUnchangedFiles="true" />
  </Target>
</Project>